<?xml version="1.0" encoding="UTF-8"?>

<!--
    status : 这个用于设置log4j2自身内部的信息输出,可以不设置,当设置成trace时,会看到log4j2内部各种详细输出
    monitorInterval : Log4j能够自动检测修改配置文件和重新配置本身, 设置间隔秒数。
-->
<Configuration status="WARN" monitorInterval="30">
    <!--
        日志级别
        共有8个级别，按照从低到高为：All < Trace < Debug < Info < Warn < Error < Fatal < OFF.
    -->
    <!-- 配置日志文件输出目录 -->
    <Properties>
        <Property name="patternLayout">[%d] [%t] %-5p [%c] - %m%n </Property>
        <!--<Property name="logdir">${sys:catalina.home}</Property>-->
        <Property name="logdir">D:/tmp</Property>
        <!--<Property name="logdir">/usr/local/apache-tomcat-8.0.30/logs</Property>-->
        <!--<Property name="logdir">/data/tomcat8/logs</Property>-->
    </Properties>
    <Appenders>
        <!--这个输出控制台的配置-->
        <Console name="CONSOLE" target="SYSTEM_OUT">
            <!-- 控制台只输出level及以上级别的信息(onMatch),其他的直接拒绝(onMismatch) -->
            <ThresholdFilter level="trace" onMatch="ACCEPT" onMismatch="DENY"/>
            <!-- 输出日志的格式 -->
            <PatternLayout charset="UTF-8" pattern="${patternLayout}"/>
        </Console>
        <Async name="ASYNC">
            <AppenderRef ref="CONSOLE"/>
        </Async>

        <!--<RollingFile name="DebugLogger" fileName="${logdir}/logs/debug/log.log"
                     filePattern="${logdir}/logs/debug/$${date:yyyy-MM}/info-%d{yyyy-MM-dd}-log-%i.log" append="true">-->
        <!--
            name 和root 里面定义的相对应
             append 决定是否在原日志末尾追加日志。调试的时候可以设置为false,很方便

        -->
       <!-- <RollingFile name="DebugLogger" fileName="${logdir}/logs/debug/log.log"
                     filePattern="${logdir}/logs/debug/log-%i.log" append="true">
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${patternLayout}"/>
            &lt;!&ndash;<SizeBasedTriggeringPolicy size="1MB"/>&ndash;&gt;
            <DefaultRolloverStrategy max="10"/>
            <Policies>
                &lt;!&ndash;根据时间来滚动&ndash;&gt;
                &lt;!&ndash;<TimeBasedTriggeringPolicy modulate="true" interval="1"/>&ndash;&gt;

                &lt;!&ndash;根据文件大小来滚动&ndash;&gt;
                <SizeBasedTriggeringPolicy size="20 MB"/>
            </Policies>
        </RollingFile>-->

       <!-- <RollingFile name="InfoLogger" fileName="${logdir}/logs/info/log.log"
                     filePattern="${logdir}/logs/info/log-%i.log" append="true">
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${patternLayout}"/>
            &lt;!&ndash;<SizeBasedTriggeringPolicy size="1MB"/>&ndash;&gt;
            <DefaultRolloverStrategy max="10"/>
            <Policies>
                &lt;!&ndash;根据时间来滚动&ndash;&gt;
                &lt;!&ndash;<TimeBasedTriggeringPolicy modulate="true" interval="1"/>&ndash;&gt;

                &lt;!&ndash;根据文件大小来滚动&ndash;&gt;
                <SizeBasedTriggeringPolicy size="20 MB"/>
            </Policies>
        </RollingFile>

        <RollingFile name="WarnLogger" fileName="${logdir}/logs/warn/log.log"
                     filePattern="${logdir}/logs/warn/log-%i.log" append="true">
            <ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${patternLayout}"/>
            &lt;!&ndash;<SizeBasedTriggeringPolicy size="1MB"/>&ndash;&gt;
            <DefaultRolloverStrategy max="10"/>
            <Policies>
                &lt;!&ndash;根据时间来滚动&ndash;&gt;
                &lt;!&ndash;<TimeBasedTriggeringPolicy modulate="true" interval="1"/>&ndash;&gt;

                &lt;!&ndash;根据文件大小来滚动&ndash;&gt;
                <SizeBasedTriggeringPolicy size="20 MB"/>
            </Policies>
        </RollingFile>

        <RollingFile name="ErrorLogger" fileName="${logdir}/logs/error/log.log"
                     filePattern="${logdir}/logs/error/log-%i.log" append="true">
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${patternLayout}"/>
            &lt;!&ndash;<SizeBasedTriggeringPolicy size="1MB"/>&ndash;&gt;
            <DefaultRolloverStrategy max="10"/>
            <Policies>
                &lt;!&ndash;根据时间来滚动&ndash;&gt;
                &lt;!&ndash;<TimeBasedTriggeringPolicy modulate="true" interval="1"/>&ndash;&gt;

                &lt;!&ndash;根据文件大小来滚动&ndash;&gt;
                <SizeBasedTriggeringPolicy size="20 MB"/>
            </Policies>
        </RollingFile>-->


        <!--<RollingFile name="importDataLog" fileName="${logdir}/logs/importData/log.log"-->
        <!--filePattern="${logdir}/logs/importData/log-%i.log" append="true">-->
        <!--<ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>-->
        <!--<PatternLayout pattern="${patternLayout}"/>-->
        <!--&lt;!&ndash;<SizeBasedTriggeringPolicy size="1MB"/>&ndash;&gt;-->
        <!--<DefaultRolloverStrategy max="10"/>-->
        <!--<Policies>-->
        <!--&lt;!&ndash;根据时间来滚动&ndash;&gt;-->
        <!--&lt;!&ndash;<TimeBasedTriggeringPolicy modulate="true" interval="1"/>&ndash;&gt;-->

        <!--&lt;!&ndash;根据文件大小来滚动&ndash;&gt;-->
        <!--<SizeBasedTriggeringPolicy size="20 MB"/>-->
        <!--</Policies>-->
        <!--</RollingFile>-->

        <!--<appender name="importDataLog" class="org.apache.log4j.DailyRollingFileAppender">
            <param name="encoding" value="UTF-8" />
            <param name="File" value="${logdir}/logs/importData/log.log" />
            <param name="DatePattern" value="'.'yyyy-MM-dd'.log'" />
            <layout class="org.apache.log4j.PatternLayout">
                <param name="ConversionPattern" value="${patternLayout}" />
            </layout>
        </appender>-->
    </Appenders>
    <loggers>

        <!--过滤掉spring和mybatis的一些无用的DEBUG信息-->
        <logger name="org.springframework" level="INFO"></logger>
        <!--<logger name="org.mybatis" level="INFO"></logger>-->
        <!--   设置日志输出级别   -->
        <root level="debug">
            <AppenderRef ref="ASYNC"/>
          <!--  <appender-ref ref="DebugLogger"/>
            <appender-ref ref="InfoLogger"/>
            <appender-ref ref="WarnLogger"/>
            <appender-ref ref="ErrorLogger"/>-->
        </root>

        <!--<logger name="yu" level="info" additivity="false">-->
        <!--<appender-ref ref="importDataLog"/>-->
        <!--</logger>-->
        <!--<logger name="com.inter3i.sun.api.ota.v1.job.schedule.SegmenteJob" level="info" additivity="false">-->
        <!--<appender-ref ref="importDataLog"/>-->
        <!--</logger>-->
        <!--<logger name="com.inter3i.sun.api.ota.v1.job.ImportDataAdapter" level="info" additivity="false">-->
        <!--<appender-ref ref="importDataLog"/>-->
        <!--</logger>-->
        <!--<logger name="com.inter3i.sun.api.ota.v1.job.SegmentAdapter" level="info" additivity="false">-->
        <!--<appender-ref ref="importDataLog"/>-->
        <!--</logger>-->
    </loggers>





    <!--%m   输出代码中指定的日志信息

%p    输出优先级，及 DEBUG、INFO 等

%n    换行符（Windows平台的换行符为 "\n"，Unix 平台为 "\n"）

%r     输出自应用启动到输出该 log 信息耗费的毫秒数

%c    输出打印语句所属的类的全名

%t     输出产生该日志的线程全名

%d    输出服务器当前时间，默认格式为 ISO8601，也可以在后面指定格式。如：%d{yyyy年MM月dd日 HH:mm:ss}

%l     输出日志时间发生的位置，包括类名、发生的线程，以及在代码中的行数，如：Test.main(Test.java:10)

%F    输出日志消息产生时所在的文件名称

%L    输出代码中的行号

%x    输出和当前线程相关的 NDC（嵌套诊断环境）

%%   输出一个 "%" 字符

可以在 % 与字符之间加上修饰符来控制最小宽度、最大宽度和文本的对其方式。如：

%5c    输出category名称，最小宽度是5，category<5，默认的情况下右对齐
%-5c   输出category名称，最小宽度是5，category<5，"-"号指定左对齐,会有空格
%.5c   输出category名称，最大宽度是5，category>5，就会将左边多出的字符截掉，<5不会有空格
%20.30c   category名称<20补空格，并且右对齐，>30字符，就从左边交远销出的字符截掉
————————————————-->
</Configuration>